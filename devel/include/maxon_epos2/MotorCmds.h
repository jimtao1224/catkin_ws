// Generated by gencpp from file maxon_epos2/MotorCmds.msg
// DO NOT EDIT!


#ifndef MAXON_EPOS2_MESSAGE_MOTORCMDS_H
#define MAXON_EPOS2_MESSAGE_MOTORCMDS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace maxon_epos2
{
template <class ContainerAllocator>
struct MotorCmds_
{
  typedef MotorCmds_<ContainerAllocator> Type;

  MotorCmds_()
    : motor_ids()
    , cmd_values()  {
    }
  MotorCmds_(const ContainerAllocator& _alloc)
    : motor_ids(_alloc)
    , cmd_values(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _motor_ids_type;
  _motor_ids_type motor_ids;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _cmd_values_type;
  _cmd_values_type cmd_values;





  typedef boost::shared_ptr< ::maxon_epos2::MotorCmds_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::maxon_epos2::MotorCmds_<ContainerAllocator> const> ConstPtr;

}; // struct MotorCmds_

typedef ::maxon_epos2::MotorCmds_<std::allocator<void> > MotorCmds;

typedef boost::shared_ptr< ::maxon_epos2::MotorCmds > MotorCmdsPtr;
typedef boost::shared_ptr< ::maxon_epos2::MotorCmds const> MotorCmdsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::maxon_epos2::MotorCmds_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::maxon_epos2::MotorCmds_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::maxon_epos2::MotorCmds_<ContainerAllocator1> & lhs, const ::maxon_epos2::MotorCmds_<ContainerAllocator2> & rhs)
{
  return lhs.motor_ids == rhs.motor_ids &&
    lhs.cmd_values == rhs.cmd_values;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::maxon_epos2::MotorCmds_<ContainerAllocator1> & lhs, const ::maxon_epos2::MotorCmds_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace maxon_epos2

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::maxon_epos2::MotorCmds_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::maxon_epos2::MotorCmds_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::maxon_epos2::MotorCmds_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::maxon_epos2::MotorCmds_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::maxon_epos2::MotorCmds_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::maxon_epos2::MotorCmds_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::maxon_epos2::MotorCmds_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1b12e2645e04fa107d86efbd8fdcf3f5";
  }

  static const char* value(const ::maxon_epos2::MotorCmds_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1b12e2645e04fa10ULL;
  static const uint64_t static_value2 = 0x7d86efbd8fdcf3f5ULL;
};

template<class ContainerAllocator>
struct DataType< ::maxon_epos2::MotorCmds_<ContainerAllocator> >
{
  static const char* value()
  {
    return "maxon_epos2/MotorCmds";
  }

  static const char* value(const ::maxon_epos2::MotorCmds_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::maxon_epos2::MotorCmds_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32[]   motor_ids\n"
"float64[] cmd_values\n"
;
  }

  static const char* value(const ::maxon_epos2::MotorCmds_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::maxon_epos2::MotorCmds_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.motor_ids);
      stream.next(m.cmd_values);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MotorCmds_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::maxon_epos2::MotorCmds_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::maxon_epos2::MotorCmds_<ContainerAllocator>& v)
  {
    s << indent << "motor_ids[]" << std::endl;
    for (size_t i = 0; i < v.motor_ids.size(); ++i)
    {
      s << indent << "  motor_ids[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.motor_ids[i]);
    }
    s << indent << "cmd_values[]" << std::endl;
    for (size_t i = 0; i < v.cmd_values.size(); ++i)
    {
      s << indent << "  cmd_values[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.cmd_values[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MAXON_EPOS2_MESSAGE_MOTORCMDS_H
