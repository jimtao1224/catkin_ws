// Generated by gencpp from file maxon_epos2/MotorState.msg
// DO NOT EDIT!


#ifndef MAXON_EPOS2_MESSAGE_MOTORSTATE_H
#define MAXON_EPOS2_MESSAGE_MOTORSTATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace maxon_epos2
{
template <class ContainerAllocator>
struct MotorState_
{
  typedef MotorState_<ContainerAllocator> Type;

  MotorState_()
    : motor_id(0)
    , pos(0.0)
    , vel(0.0)
    , cur(0.0)  {
    }
  MotorState_(const ContainerAllocator& _alloc)
    : motor_id(0)
    , pos(0.0)
    , vel(0.0)
    , cur(0.0)  {
  (void)_alloc;
    }



   typedef int32_t _motor_id_type;
  _motor_id_type motor_id;

   typedef double _pos_type;
  _pos_type pos;

   typedef double _vel_type;
  _vel_type vel;

   typedef double _cur_type;
  _cur_type cur;





  typedef boost::shared_ptr< ::maxon_epos2::MotorState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::maxon_epos2::MotorState_<ContainerAllocator> const> ConstPtr;

}; // struct MotorState_

typedef ::maxon_epos2::MotorState_<std::allocator<void> > MotorState;

typedef boost::shared_ptr< ::maxon_epos2::MotorState > MotorStatePtr;
typedef boost::shared_ptr< ::maxon_epos2::MotorState const> MotorStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::maxon_epos2::MotorState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::maxon_epos2::MotorState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::maxon_epos2::MotorState_<ContainerAllocator1> & lhs, const ::maxon_epos2::MotorState_<ContainerAllocator2> & rhs)
{
  return lhs.motor_id == rhs.motor_id &&
    lhs.pos == rhs.pos &&
    lhs.vel == rhs.vel &&
    lhs.cur == rhs.cur;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::maxon_epos2::MotorState_<ContainerAllocator1> & lhs, const ::maxon_epos2::MotorState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace maxon_epos2

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::maxon_epos2::MotorState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::maxon_epos2::MotorState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::maxon_epos2::MotorState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::maxon_epos2::MotorState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::maxon_epos2::MotorState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::maxon_epos2::MotorState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::maxon_epos2::MotorState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a6bd4ada87b249d3b15c0971aa64e0cb";
  }

  static const char* value(const ::maxon_epos2::MotorState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa6bd4ada87b249d3ULL;
  static const uint64_t static_value2 = 0xb15c0971aa64e0cbULL;
};

template<class ContainerAllocator>
struct DataType< ::maxon_epos2::MotorState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "maxon_epos2/MotorState";
  }

  static const char* value(const ::maxon_epos2::MotorState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::maxon_epos2::MotorState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32   motor_id\n"
"float64 pos\n"
"float64 vel\n"
"float64 cur\n"
;
  }

  static const char* value(const ::maxon_epos2::MotorState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::maxon_epos2::MotorState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.motor_id);
      stream.next(m.pos);
      stream.next(m.vel);
      stream.next(m.cur);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MotorState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::maxon_epos2::MotorState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::maxon_epos2::MotorState_<ContainerAllocator>& v)
  {
    s << indent << "motor_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.motor_id);
    s << indent << "pos: ";
    Printer<double>::stream(s, indent + "  ", v.pos);
    s << indent << "vel: ";
    Printer<double>::stream(s, indent + "  ", v.vel);
    s << indent << "cur: ";
    Printer<double>::stream(s, indent + "  ", v.cur);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MAXON_EPOS2_MESSAGE_MOTORSTATE_H
