// Generated by gencpp from file vehicle_controller/CalibrationRequest.msg
// DO NOT EDIT!


#ifndef VEHICLE_CONTROLLER_MESSAGE_CALIBRATIONREQUEST_H
#define VEHICLE_CONTROLLER_MESSAGE_CALIBRATIONREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace vehicle_controller
{
template <class ContainerAllocator>
struct CalibrationRequest_
{
  typedef CalibrationRequest_<ContainerAllocator> Type;

  CalibrationRequest_()
    : pos_x(0.0)
    , pos_y(0.0)
    , pos_r(0.0)  {
    }
  CalibrationRequest_(const ContainerAllocator& _alloc)
    : pos_x(0.0)
    , pos_y(0.0)
    , pos_r(0.0)  {
  (void)_alloc;
    }



   typedef float _pos_x_type;
  _pos_x_type pos_x;

   typedef float _pos_y_type;
  _pos_y_type pos_y;

   typedef float _pos_r_type;
  _pos_r_type pos_r;





  typedef boost::shared_ptr< ::vehicle_controller::CalibrationRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vehicle_controller::CalibrationRequest_<ContainerAllocator> const> ConstPtr;

}; // struct CalibrationRequest_

typedef ::vehicle_controller::CalibrationRequest_<std::allocator<void> > CalibrationRequest;

typedef boost::shared_ptr< ::vehicle_controller::CalibrationRequest > CalibrationRequestPtr;
typedef boost::shared_ptr< ::vehicle_controller::CalibrationRequest const> CalibrationRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::vehicle_controller::CalibrationRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::vehicle_controller::CalibrationRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::vehicle_controller::CalibrationRequest_<ContainerAllocator1> & lhs, const ::vehicle_controller::CalibrationRequest_<ContainerAllocator2> & rhs)
{
  return lhs.pos_x == rhs.pos_x &&
    lhs.pos_y == rhs.pos_y &&
    lhs.pos_r == rhs.pos_r;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::vehicle_controller::CalibrationRequest_<ContainerAllocator1> & lhs, const ::vehicle_controller::CalibrationRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace vehicle_controller

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::vehicle_controller::CalibrationRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vehicle_controller::CalibrationRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vehicle_controller::CalibrationRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vehicle_controller::CalibrationRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vehicle_controller::CalibrationRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vehicle_controller::CalibrationRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::vehicle_controller::CalibrationRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6c287b1bb5efd36c9a180586a566987f";
  }

  static const char* value(const ::vehicle_controller::CalibrationRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6c287b1bb5efd36cULL;
  static const uint64_t static_value2 = 0x9a180586a566987fULL;
};

template<class ContainerAllocator>
struct DataType< ::vehicle_controller::CalibrationRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "vehicle_controller/CalibrationRequest";
  }

  static const char* value(const ::vehicle_controller::CalibrationRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::vehicle_controller::CalibrationRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 pos_x\n"
"float32 pos_y\n"
"float32 pos_r\n"
"\n"
;
  }

  static const char* value(const ::vehicle_controller::CalibrationRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::vehicle_controller::CalibrationRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pos_x);
      stream.next(m.pos_y);
      stream.next(m.pos_r);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CalibrationRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::vehicle_controller::CalibrationRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::vehicle_controller::CalibrationRequest_<ContainerAllocator>& v)
  {
    s << indent << "pos_x: ";
    Printer<float>::stream(s, indent + "  ", v.pos_x);
    s << indent << "pos_y: ";
    Printer<float>::stream(s, indent + "  ", v.pos_y);
    s << indent << "pos_r: ";
    Printer<float>::stream(s, indent + "  ", v.pos_r);
  }
};

} // namespace message_operations
} // namespace ros

#endif // VEHICLE_CONTROLLER_MESSAGE_CALIBRATIONREQUEST_H
