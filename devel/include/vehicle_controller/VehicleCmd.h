// Generated by gencpp from file vehicle_controller/VehicleCmd.msg
// DO NOT EDIT!


#ifndef VEHICLE_CONTROLLER_MESSAGE_VEHICLECMD_H
#define VEHICLE_CONTROLLER_MESSAGE_VEHICLECMD_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace vehicle_controller
{
template <class ContainerAllocator>
struct VehicleCmd_
{
  typedef VehicleCmd_<ContainerAllocator> Type;

  VehicleCmd_()
    : vel_x(0.0)
    , vel_y(0.0)
    , vel_r(0.0)  {
    }
  VehicleCmd_(const ContainerAllocator& _alloc)
    : vel_x(0.0)
    , vel_y(0.0)
    , vel_r(0.0)  {
  (void)_alloc;
    }



   typedef float _vel_x_type;
  _vel_x_type vel_x;

   typedef float _vel_y_type;
  _vel_y_type vel_y;

   typedef float _vel_r_type;
  _vel_r_type vel_r;





  typedef boost::shared_ptr< ::vehicle_controller::VehicleCmd_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vehicle_controller::VehicleCmd_<ContainerAllocator> const> ConstPtr;

}; // struct VehicleCmd_

typedef ::vehicle_controller::VehicleCmd_<std::allocator<void> > VehicleCmd;

typedef boost::shared_ptr< ::vehicle_controller::VehicleCmd > VehicleCmdPtr;
typedef boost::shared_ptr< ::vehicle_controller::VehicleCmd const> VehicleCmdConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::vehicle_controller::VehicleCmd_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::vehicle_controller::VehicleCmd_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::vehicle_controller::VehicleCmd_<ContainerAllocator1> & lhs, const ::vehicle_controller::VehicleCmd_<ContainerAllocator2> & rhs)
{
  return lhs.vel_x == rhs.vel_x &&
    lhs.vel_y == rhs.vel_y &&
    lhs.vel_r == rhs.vel_r;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::vehicle_controller::VehicleCmd_<ContainerAllocator1> & lhs, const ::vehicle_controller::VehicleCmd_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace vehicle_controller

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::vehicle_controller::VehicleCmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vehicle_controller::VehicleCmd_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vehicle_controller::VehicleCmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vehicle_controller::VehicleCmd_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vehicle_controller::VehicleCmd_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vehicle_controller::VehicleCmd_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::vehicle_controller::VehicleCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b469c40e26903550ecb3eed6f99e613b";
  }

  static const char* value(const ::vehicle_controller::VehicleCmd_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb469c40e26903550ULL;
  static const uint64_t static_value2 = 0xecb3eed6f99e613bULL;
};

template<class ContainerAllocator>
struct DataType< ::vehicle_controller::VehicleCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "vehicle_controller/VehicleCmd";
  }

  static const char* value(const ::vehicle_controller::VehicleCmd_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::vehicle_controller::VehicleCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 vel_x\n"
"float32 vel_y\n"
"float32 vel_r\n"
;
  }

  static const char* value(const ::vehicle_controller::VehicleCmd_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::vehicle_controller::VehicleCmd_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.vel_x);
      stream.next(m.vel_y);
      stream.next(m.vel_r);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct VehicleCmd_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::vehicle_controller::VehicleCmd_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::vehicle_controller::VehicleCmd_<ContainerAllocator>& v)
  {
    s << indent << "vel_x: ";
    Printer<float>::stream(s, indent + "  ", v.vel_x);
    s << indent << "vel_y: ";
    Printer<float>::stream(s, indent + "  ", v.vel_y);
    s << indent << "vel_r: ";
    Printer<float>::stream(s, indent + "  ", v.vel_r);
  }
};

} // namespace message_operations
} // namespace ros

#endif // VEHICLE_CONTROLLER_MESSAGE_VEHICLECMD_H
